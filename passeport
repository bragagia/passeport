#!/bin/bash

main ()
{
	passeport_data="$HOME"/.local/share/passeport
	mkdir -p $passeport_data
	mkdir -p $passeport_data/installed
	if [ "$?" -eq 1 ]; then
		echo "Failed to create $passeport_data/" >&2
		exit 1
	fi

	if [ ! -f "$HOME"/.local/share/passeport/var ]; then
		cat << STOP > "$passeport_data"/var
passeport_path=$HOME/passeport
STOP
	fi
	source "$passeport_data"/var

	if [ -z ${XDG_CONFIG_HOME+x} ]; then
		XDG_CONFIG_HOME="$HOME/.config"
	fi

	exec_command "$@"
}

exec_command ()
{
	if [[ $# < 1 ]]; then
		showhelp
		exit 1
	else
		case "$1" in
			setpath)
				shift
				setpath "$@"
				;;

			update|u)
				shift
				update "$@"
				;;

			update-all|ua)
				shift
				update_all "$@"
				;;

			install|i)
				shift
				install "$@"
				;;

			remove|r)
				shift
				remove "$@"
				;;

			sync|s)
				shift
				sync "$@"
				;;

			help|h|-h|--help)
				shift
				help "$@"
				;;

			*)
				showhelp
				exit 1
				;;
		esac
	fi
}

# Commands

sync ()
{
	cd "$passeport_path"
	git add -A
	git commit -m "passeport auto-commit"
	set -e
	git pull
	git push
	set +e
}

install ()
{
	if [ $# -lt 1 ]; then
		showhelp install
		exit 1
	fi
	if [ ! -d "$passeport_path"/"$1" ]; then
		echo "This config does not exist." >&2
		exit
	fi
	if is_installed "$1"; then
		echo "This config is already installed." >&2
		exit 1
	fi

	# Git install
	local gitfile="$passeport_path"/"$1"/git 
	if [ -f "$gitfile" ]; then
		mkdir -p "$passeport_data"/installed/"$1"
		cp "$gitfile" "$passeport_data"/installed/"$1"/

		fillgitfile "$gitfile" | gitinstall
	fi

	# Files install
	files_install "$1"
}

update ()
{
	if [ $# -lt 1 ]; then
		showhelp update
		exit 1
	fi
	if [ ! -d "$passeport_path"/"$1" ]; then
		echo "This config does not exist." >&2
		exit 1
	fi
	if ! is_installed "$1"; then
		echo "This config is not installed." >&2
		exit 1
	fi

	# Git update
	local gitfile="$passeport_path"/"$1"/git 
	local oldgitfile="$passeport_data"/installed/"$1"/git

	if [ -f "$gitfile" ] && [ -f "$oldgitfile" ]; then
		local sgitfile=`mktemp`
		local soldgitfile=`mktemp`
		sort < "$gitfile" > "$sgitfile"
		sort < "$oldgitfile" > "$soldgitfile"

		local newgit=`mktemp`
		local commongit=`mktemp`
		local oldgit=`mktemp`
		comm -13 "$soldgitfile" "$sgitfile" > "$newgit"
		comm -12 "$soldgitfile" "$sgitfile" > "$commongit"
		comm -23 "$soldgitfile" "$sgitfile" > "$oldgit"

		fillgitfile "$oldgit" | gitremove
		fillgitfile "$commongit" | gitupdate
		fillgitfile "$newgit" | gitinstall

		cp "$gitfile" "$oldgitfile"
	elif [ -f "$oldgitfile" ]; then
		fillgitfile "$oldgitfile" | gitremove
	elif [ -f "$gitfile" ]; then
		mkdir -p "$passeport_data"/installed/"$1"
		cp "$gitfile" "$passeport_data"/installed/"$1"/

		fillgitfile "$gitfile" | gitupdate

		cp "$gitfile" "$oldgitfile"
	fi


	# Files update
	files_remove "$1"

	files_install "$1"
}

update_all ()
{
	list_installed |
	while read line; do
		echo "# Updating $line"
		update $line
	done
}

remove ()
{
	if [ $# -lt 1 ]; then
		showhelp update
		exit 1
	fi
	if [ ! -d "$passeport_path"/"$1" ]; then
		echo "This config does not exist." >&2
		exit 1
	fi
	if ! is_installed "$1"; then
		echo "This config is not installed." >&2
		exit 1
	fi

	# Git remove
	local gitfile="$passeport_data"/installed/"$1"/git

	if [ -f "$gitfile" ]; then
		fillgitfile "$gitfile" | gitremove
	fi

	# Files remove
	files_remove "$1"

	rm -rf "$passeport_data"/installed/"$1"
}

# Utilities

is_installed ()
{
	if [ "$1" == "" ]; then
		echo "Empty config name" >&2
		exit 1
	fi

	if [ -d "$passeport_data"/installed/"$1" ]; then
		return 0
	else
		return 1
	fi
}

files_remove ()
{
	if ! is_installed "$1"; then
		echo "This config is not installed." >&2
		exit 1
	fi

	local pathlist=("xdg" "home" "root")
	local resultpath=("$XDG_CONFIG_HOME" "$HOME" "/")
	local globallist=(false false true)

	for i in 0 1 2; do
		local path=${pathlist[$i]} 
		local result=${resultpath[$i]}
		local isglobal=${globallist[$i]}

		if [ -d "$passeport_data"/installed/"$1"/"$path" ]; then
			from="$passeport_data"/installed/"$1"/"$path"
			to="$result"
			for src_file in $(find "$from" | tac | head -n -1); do
				dst_file=$(echo "$src_file" | sed "s#$from#$to#g")
				if $isglobal; then
					sudo rm -d "$dst_file" 2> /dev/null
					if [ -f "$dst_file".passeport_backup ]; then
						sudo mv "$dst_file".passeport_backup "$dst_file"
					fi
				else
					rm -d "$dst_file" 2> /dev/null
					if [ -f "$dst_file".passeport_backup ]; then
						mv "$dst_file".passeport_backup "$dst_file"
					fi
				fi
				rm -d "$src_file" 2> /dev/null
			done
		fi
	done
}

files_install ()
{
	local pathlist=("xdg" "home" "root")
	local resultpath=("$XDG_CONFIG_HOME" "$HOME" "/")
	local globallist=(false false true)

	for i in 0 1 2; do
		local path=${pathlist[$i]} 
		local result=${resultpath[$i]}
		local isglobal=${globallist[$i]}

		if [ -d "$passeport_path"/"$1"/"$path" ]; then
			if $isglobal; then
				mkdir -p "$passeport_data"/installed/"$1"/"$path"
				cp -a "$passeport_path"/"$1"/"$path"/. "$passeport_data"/installed/"$1"/"$path"
				sudo cp -ua "$passeport_path"/"$1"/"$path"/. "$result"
			else
				mkdir -p "$passeport_data"/installed/"$1"/"$path"
				cp -a "$passeport_path"/"$1"/"$path"/. "$passeport_data"/installed/"$1"/"$path"
				cp -ua "$passeport_path"/"$1"/"$path"/. "$result"
			fi
		fi
	done
}

fillgitfile ()
{
	grep -v "^/" "$1" |
	sed "s#^__xdg__#$XDG_CONFIG_HOME#g" |
	sed "s#^__home__#$HOME#g" 
}

gitgetrepofromline ()
{
	echo "$1" | sed "s/^.* \([^ ]*\)$/\1/g"
}

gitgetpathfromline ()
{
	echo "$1" | sed "s/^\(.*\) [^ ]*$/\1/g"
}

gitinstall ()
{
	while read line; do
		local repo=`gitgetrepofromline "$line"`
		local path=`gitgetpathfromline "$line"`

		echo "git: $path"

		if [ -e "$path" ]; then
			mv "$path" "$path".passeport_backup
		fi

		mkdir -p "$path"
		git clone "$repo" "$path" > /dev/null
	done
}

gitremove ()
{
	while read line; do
		local repo=`gitgetrepofromline "$line"`
		local path=`gitgetpathfromline "$line"`

		echo "git: $path"

		if [ -e "$path"/.git ]; then
			rm -rf "$path"
			echo "Removed."
		else
			echo "There is no git setup here." >&2
		fi
	done
}

gitupdate ()
{
	while read line; do
		local repo=`gitgetrepofromline "$line"`
		local path=`gitgetpathfromline "$line"`

		echo "git: $path"

		if [ -e "$path" ]; then
			git -C "$path" pull > /dev/null
		else
			mkdir -p "$path"
			git clone "$repo" "$path" > /dev/null
		fi
	done
}

list_installed ()
{
	ls "$passeport_data"/installed/ 2> /dev/null | cat
}

# Run

main "$@"
